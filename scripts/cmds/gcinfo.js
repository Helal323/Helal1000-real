module.exports = {
  config: {
    name: "groupinfo",
    aliases: ["gcinfo"],
    version: "3.5",
    author: "Helal",
    countDown: 5,
    role: 0,
    category: "utility",
    shortDescription: { en: "Show full info about this group" },
  },

  onStart: async function ({ message, event, api, threadsData }) {
    try {
      const threadID = event.threadID;
      const threadInfo = await api.getThreadInfo(threadID);

      const name = threadInfo.threadName || "Unnamed Group";
      const id = threadID;
      const adminIDs = threadInfo.adminIDs.map(a => a.id);
      const memberCount = threadInfo.participantIDs.length;
      const approval = threadInfo.approvalMode ? "‚úÖ On" : "‚ùå Off";
      const emoji = threadInfo.emoji || "üí¨";
      const nicknames = threadInfo.nicknames || {};

      const adminNames = [];
      for (const admin of adminIDs) {
        const userInfo = await api.getUserInfo(admin);
        adminNames.push(userInfo[admin].name);
      }

      const msg = `
üåê *GROUP INFORMATION*

üè∑Ô∏è Group Name: ${name}
üÜî Group ID: ${id}
üë• Total Members: ${memberCount}
üëë Total Admins: ${adminIDs.length}
üì© Join Approval: ${approval}
üí¨ Group Emoji: ${emoji}

üëë *Admins:*
${adminNames.map(n => `‚Ä¢ ${n}`).join("\n")}

üïì Last Activity: ${new Date().toLocaleString("en-US", { timeZone: "Asia/Dhaka" })}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üìö *Nicknames (if any)*  
${Object.keys(nicknames).length > 0
  ? Object.entries(nicknames)
      .map(([uid, nick]) => `- ${nick}`)
      .join("\n")
  : "No nicknames set."}

‚ú® *Powered by Cat Bot √ó GPT-5*
`;

      message.reply(msg);
    } catch (err) {
      console.error(err);
      message.reply("‚ö†Ô∏è Sorry, couldn't fetch group info!");
    }
  },
};
